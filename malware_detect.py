# -*- coding: utf-8 -*- 
from pyfsig.file_signatures import signatures
from pyfsig.file_signatures import Signature, Matches, NoMatchException
from pyfsig.file_signatures import compare_sig, get_from_file, get_from_path
from vba_parser_and_detect.vba_macro_parser import Extract_VBA
from vba_parser_and_detect.detect_mal_vba import MalFunc, find_malicious_code_from_vba
import check_file_type.find_file_type
import sys
import subprocess
import os
from optparse import OptionParser
    


OOXML = "50 4B 03 04"                  #pptx, docx, xlsx
OLECF = "D0 CF 11 E0 A1 B1 1A E1"      #ppt, xls, doc, hwp
PDF = "25 50 44 46"                    #pdf

ROOT = os.path.dirname(os.path.abspath(__file__))
TESTS = os.path.join(ROOT, 'testset')
MODULE_PATH = os.path.join(ROOT, "module/")
HWP_PARSER_PATH = os.path.join(MODULE_PATH, "hwp-parser")
PDF_PARSER_PATH = os.path.join(MODULE_PATH, "pdf-analysis-module")

def _print_result(file:str, result :bool):
    print("++++++++++++++++++")
    print(f"{file} malware result => {result}")
    print("++++++++++++++++++")

def _command_pipeline(command:str) -> int:
   try:
      _ = subprocess.check_call(f'{command}',
         shell=True,
         stdout=sys.stdout,
      )
   except Exception as e:
      print(e)
      return -2

   return 0

def check_js_malware(pure_file_name):
   with open(f"{pure_file_name}.js", 'r') as f:
      raw_code = f.read().upper()
      _print_result(f"{pure_file_name}.js", search_signature(raw_code))

def search_signature(js: str) -> bool:
   signature = [
      "setcookie",
      "getcookie",
      "createxmlhttprequest",
      "unescape",
      "document.write",
      "element.appendChild",
      "dateObject.toGmtString",
      "newactivexobject",
      "document.createelement"
   ]

   for sig in signature:
      if sig.upper() in js:
         return True # yes virus

   return False # no virus


if __name__ == "__main__":
   usage = "usage: %prog --file=file.hwp"
   parser = OptionParser(usage)
   parser.add_option("-f", "--file", dest="filename", help="bob")
    
   (options, args) = parser.parse_args()
    
   f_name = options.filename
   pure_file_name = f_name.split('.')[0]
   abs_file_name = os.path.abspath(f_name)


   try:
      with open(f_name, "rb") as f:
         __file_signatures = get_from_file(f)
   except Exception as e:
      print(e)

   if __file_signatures[0]['hex'] == OOXML: 
      vba_code = Extract_VBA(f_name)
      if vba_code:
         find_malicious_code_from_vba(vba_code)
      else:
         pass
   elif __file_signatures[0]['hex'] == OLECF:
      if check_file_type.find_file_type.get_file_type(f_name) == 'HWP':
         _command_pipeline(f"python {HWP_PARSER_PATH}/hwp-parser.py {abs_file_name}")
         check_js_malware(pure_file_name)
      elif check_file_type.find_file_type.get_file_type(f_name) in ['DOC', 'PPT', 'XLS']:
         vba_code = Extract_VBA(f_name)
         if vba_code:
            find_malicious_code_from_vba(vba_code)
         else:
            pass
   elif __file_signatures[0]['hex'] == PDF:
      command = _command_pipeline(f"python {PDF_PARSER_PATH}/main.py --file {abs_file_name}")
      check_js_malware(pure_file_name)
   else:
      print("this file is Out of inspection target.")



